/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.37
 * Generated at: 2017-08-08 06:00:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class VigenereCipher_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/VigenereCipher.css\"  type=\"text/css\" media=\"screen\" />\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<title>VigenereCipher-Page</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<header class=\"header\">\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\t<a class=\"headA\" href=\"/CipherProject/\">CipherProject</a>\r\n");
      out.write("\t</div>\r\n");
      out.write("</header>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<section class=\"con\">\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t<div class=\"photoA\">\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\t<h1>VigenereCipher</h1>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\t<ol>\r\n");
      out.write("\t\t<strong>-目次-</strong>\r\n");
      out.write("\t\t<li>VigenereCipherとは...</li>\r\n");
      out.write("\t\t<li>暗号の仕組み ～ 暗号化と復号化</li>\r\n");
      out.write("\t\t<li>VigenereCipherの使い方</li>\r\n");
      out.write("\t\t</ol>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\t<a class=\"urlA\" href=\"http://localhost/VigenereCipher/VigenereCipher\">これを使ってみる</a>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\t<div class=\"text\">\r\n");
      out.write("\t\t\t<h3>1.VigenereCipherとは...</h3>\r\n");
      out.write("\t\t\t\t<p>VigenereCipherは16世紀初頭頃、ブレーズ・ド・ヴィジュネルによってvigenereCipherを実用的な暗号として作り上げました。<br>\r\n");
      out.write("\t\t\t\t\tというのも、VigenereCipherの原型は1460年頃レオン・バティスタ・アルベルティから始まり、その後、ドイツの修道院長ヨハネス・トリテミウス、イタリアのジョヴァンニ・ポルタがその仕事を受け継ぎ、最後に彼らの考えをまとめ上げたのがブレーズ・ド・ヴィジュネルなのです。</p>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<h3>2.暗号の仕組み ～ 暗号化と復号化</h3>\r\n");
      out.write("\t\t\t\t<p>vigenereCipherは先ずヴィジュネル方陣を用意します（図.1）。鍵は文字を使います。その鍵の文字にヴィジュネル方陣に対応させながら平文を暗号文に変化させていきます。</p>\r\n");
      out.write("\t\t\t\t<legend>図.1 ヴィジュネル方陣</legend>\r\n");
      out.write("\t\t\t\t<img src=\"img/VigenereCipher-jpeg/VigenereSquare.jpg\"alt=\"fig.1\"><br><br><br>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<h4>暗号化</h4>\r\n");
      out.write("\t\t\t\t\t<p>例えば、次の平文\"Hello\"を鍵\"dog\"で暗号化するとこうなります（図.2）。</p>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t<legend>図.2</legend>\r\n");
      out.write("\t\t\t\t\t<img class=\"imgA\" src=\"img/VigenereCipher-jpeg/VigenereCipher_gigure_1.jpg\" alt=\"fig.2\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t<p>平文の最初の\"H\"は\"K\"に変換されています。これは鍵の\"d\"と対応するヴィジュネル暗号の３行目を用いて\"H\"を\"K\"に変換したのです（図.3）。</p>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t<legend>図.3</legend>\r\n");
      out.write("\t\t\t\t\t<img src=\"img/VigenereCipher-jpeg/VigenereCipher_gigure_2.jpg\" alt=\"fig.3\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t<p>同様に平文の\"e\"は鍵の\"o\"（ヴィジュネル方陣の１４行目）によって\"s\"に変換されて、平文の\"l\"は鍵の\"g\"（ヴィジュネル方陣の６行目）によって\"r\"変換されます。<br>\r\n");
      out.write("\t\t\t\t\t\tさて、鍵は\"dog\"の三文字ですが、続く二文字目の\"l\"は何で変換されるでしょうか。鍵は平文の文字数に対して再利用されて、\"l\"は鍵の\"d\"（ヴィジュネル方陣の1行目）によって\"o\"に変換されます。</p>\r\n");
      out.write("\t\t\t\t\t<strong>ああ...なんと環境にやさしいエコな暗号なのでしょう!!</strong><br><br>\r\n");
      out.write("\t\t\t\t\t<p>このように続けて平文の一文字ずつを暗号化してやると、最終的に暗号文\"Ksroc crfrg\"が出来ます。暗号化の過程を確認してください（図.4）。</p>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t<legend>図.4</legend>\r\n");
      out.write("\t\t\t\t\t<img  class=\"imgA\" src=\"img/VigenereCipher-jpeg/VigenereCipher_gigure_3.jpg\" alt=\"fig.4\"><br><br>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<h4>復号化</h4>\r\n");
      out.write("\t\t\t\t\t<p>復号化の手順は暗号化で使った鍵\"dog\"をヴィジュネル方陣の行に対応をさせながら、暗号文\"Ksroc crfrg\"を一文字ずつ復号化していけば良いわけです。</p>\r\n");
      out.write("\t\t\t<h3>3.当サイトVigenereCipherの使い方</h3>\r\n");
      out.write("\t\t\t\t<img class=\"imgB\" src=\"img/VigenereCipher-jpeg/VigenereCipher_page.jpg\" alt=\"VigenereCipher_page\"><br><br>\r\n");
      out.write("\t\t\t\t<p>ここではVigenereCipherの使い方の手順について説明します。</p>\r\n");
      out.write("\t\t\t\t<ol>\r\n");
      out.write("\t\t\t\t<li type=\"I\">\"1.\"では、あなたのメッセージを暗号化（encrypt）または復号化（decrypt）するのかを選択してください。</li><br>\r\n");
      out.write("\t\t\t\t<li type=\"I\">\"2.\"では、暗号化（または復号化）に使う鍵の文字を入力してください。鍵の文字に対応するヴィジュネル方陣は以下の図（図.5）のとおりです。</li><br>\r\n");
      out.write("\t\t\t\t<li type=\"I\">\"3.\"では、あなたのメッセージを入れてください。ただし、暗号化（または復号化）できるのはアルファベットの小文字（a-z）と大文字（A-Z）のみとなっております。</li><br>\r\n");
      out.write("\t\t\t\t<li type=\"I\">テキストフォームの下にある\"Encrypt or Decrypt\"のフォーム入力ボタンで\"1.と2.\"の設定に基づいて\"3.\"のテキストフォームに入力されたメッセージを\r\n");
      out.write("\t\t\t\t\t暗号化（または復号化）します。\"Erasing\"はテキストフォームのメッセージを消去できます。結果は別途にWebページが表示されます。</li>\r\n");
      out.write("\t\t\t\t</ol>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</section>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<footer>\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\t<div class=\"footA\">\r\n");
      out.write("\t\t\t<h2>CipherProject</h2>\r\n");
      out.write("\t\t\t<p>作成者：渡利蘭太</p>\r\n");
      out.write("\t\t\t<p>\r\n");
      out.write("\t\t\tHello!!CipherProject!!webサイトを作ってみました。<br>\r\n");
      out.write("\t\t\tタイトルに特別な意味はありません。\r\n");
      out.write("\t\t\t</p>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</footer>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
